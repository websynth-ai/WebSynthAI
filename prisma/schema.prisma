// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(uuid())
  username          String     @unique
  name              String?
  email             String?    @unique
  emailVerified     DateTime?
  imageUrl          String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  accounts          Account[]
  sessions          Session[]
  UI                UI[]
  bugReports        BugReport[]
}

model Account {
  id                String     @id @default(uuid())
  userId            String     
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?    @db.Text
  access_token      String?    @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?    @db.Text
  session_state     String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                String     @id @default(uuid())
  sessionToken      String     @unique
  userId            String     
  expires           DateTime
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id                String     @id @default(uuid())
  identifier        String
  token             String
  expires           DateTime

  @@unique([identifier, token])
}

model UI {
  id                String     @id @default(uuid())
  userId            String     @unique
  public            Boolean    @default(true)
  prompt            String
  img               String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   
  uiType            String    
  likesCount        Int        @default(0)
  viewCount         Int        @default(0)
  subPrompts        SubPrompt[]
  likes             Like[]
  forkedFrom        String?

  user              User       @relation(fields: [userId], references: [id])
}

model SubPrompt {
  id               String     @id @default(uuid())
  UIId             String     
  SUBId            String     @unique
  createdAt        DateTime   @default(now())
  subPrompt        String
  modelId          String?
  codeId           String     

  code             Code       @relation(fields: [codeId], references: [id], onDelete: Cascade)
  UI               UI         @relation(fields: [UIId], references: [id], onDelete: Cascade)
}

model Code {
  id               String      @id @default(uuid())
  code             String
  prompts          SubPrompt[]
}

model Like {
  id               String     @id @default(uuid())
  userId           String
  UIId             String     
  createdAt        DateTime   @default(now())

  ui               UI         @relation(fields: [UIId], references: [id], onDelete: Cascade)
}

model BugReport {
  id               String     @id @default(uuid())
  title            String
  description      String
  reportType       String
  severity         String
  steps            String?
  userId           String     
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}
